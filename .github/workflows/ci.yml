name: Build

on:
  push:
    branches: [main, release]

jobs:
  frontend-build:
    name: Build and publish frontend 🏗️
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: benjlevesque/short-sha@v2.1
        id: short-sha

      - uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: waigel.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: frontend.Dockerfile
          push: true
          tags: waigel.azurecr.io/lexoffice/iban-validator-frontend:${{ steps.short-sha.outputs.sha }}
          build-args: |
            GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            GIT_COMMIT=${{ steps.short-sha.outputs.sha }}
            TOLGEE_DOWNLOAD_API_KEY=${{ secrets.TOLGEE_DOWNLOAD_API_KEY }}
            REACT_APP_API_ENDPOINT=${{ secrets.REACT_APP_API_ENDPOINT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  backend-build:
    name: Build backend 🏗️
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 17

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Run spotlessCheck
        run: ./gradlew spotlessCheck

      - name: Run pmdMain
        run: ./gradlew pmdMain

      - name: Run pmdTest
        run: ./gradlew pmdTest

      - name: Build backend
        run: ./gradlew bootJar

      - name: Tar build
        run: tar -czf ~/backend.tgz ./build

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend
          path: |
            ~/backend.tgz

  backend-test:
    name: Test backend 🧪
    needs: [backend-build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 17

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Test backend
        run: ./gradlew test

  backend-docker:
    name: Publish backend 🐬
    needs: [backend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: benjlevesque/short-sha@v2.1
        id: short-sha

      - name: Download backend build result
        uses: actions/download-artifact@v3
        with:
          name: backend
          path: ~/

      - name: Untar it
        run: |
          tar -xzf ~/backend.tgz ./build

      - uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: waigel.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: backend.Dockerfile
          push: true
          tags: waigel.azurecr.io/lexoffice/iban-validator-api:${{ steps.short-sha.outputs.sha }}
          build-args: |
            GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            GIT_COMMIT=${{ steps.short-sha.outputs.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deployment:
    name: Deployment 🚀
    runs-on: ubuntu-latest
    needs: [backend-docker, frontend-build]
    steps:
      - uses: actions/checkout@v3
      - uses: imranismail/setup-kustomize@v2
      - name: Create .env file with api related secrets
        run: |
          echo "IBAN_API_KEY=${{ secrets.IBAN_API_KEY }}" > k8s/template/.env
      - name: Creat application-live.properties file
        run: |
          echo "${{ secrets.SPRING_BOOT_APPLICATION_PROPERTIES }}" > k8s/template/application-live.properties
      - name: Build kustomize deployment config
        run: ./k8s/k8s-apply.sh
      - uses: actions-hub/kubectl@v1.26.0
        env:
          KUBE_CONFIG: ${{ secrets.K8S_CONFIG }}
        with:
          args: apply -f k8s/prod.yml
  cleanup:
    name: Cleanup 🧹
    runs-on: ubuntu-latest
    if: always()
    needs: [deployment]
    steps:
      - uses: geekyeggo/delete-artifact@v2.0.0
        with:
          name: backend
